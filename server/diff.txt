diff --git a/server/src/main/java/br/udesc/dsd/controller/ISimulacaoController.java b/server/src/main/java/br/udesc/dsd/controller/ISimulacaoController.java
index 70830fe..cf1f625 100644
--- a/server/src/main/java/br/udesc/dsd/controller/ISimulacaoController.java
+++ b/server/src/main/java/br/udesc/dsd/controller/ISimulacaoController.java
@@ -1,4 +1,7 @@
 package br.udesc.dsd.controller;
 
 public interface ISimulacaoController {
-}
+    void iniciarSimulacao();
+    void pararInsercao();
+    void encerrarSimulacao();
+}
\ No newline at end of file
diff --git a/server/src/main/java/br/udesc/dsd/controller/SimulacaoControllerSemaforo.java b/server/src/main/java/br/udesc/dsd/controller/SimulacaoControllerSemaforo.java
index 588e6fc..3356709 100644
--- a/server/src/main/java/br/udesc/dsd/controller/SimulacaoControllerSemaforo.java
+++ b/server/src/main/java/br/udesc/dsd/controller/SimulacaoControllerSemaforo.java
@@ -9,84 +9,107 @@ import java.util.*;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 
-public class SimulacaoController implements ISimulacaoController{
+public class SimulacaoControllerSemaforo implements ISimulacaoController {
 
     private final MalhaController malhaController;
     private final MalhaView malhaView;
 
     private Thread threadInsercao;
     private final List<CarroSemaforo> carrosAtivos = new ArrayList<>();
-    private final Semaphore semaforoListaCarros = new Semaphore(1, true); // evita problemas de insert/remove com a threadInsercao
+    private final Semaphore semaforoListaCarros = new Semaphore(1, true);
     private volatile boolean insercaoAtiva = false;
 
-    public SimulacaoController(MalhaController malhaController, MalhaView malhaView) {
+    public SimulacaoControllerSemaforo(MalhaController malhaController, MalhaView malhaView) {
         this.malhaController = malhaController;
         this.malhaView = malhaView;
-
-        configurarEventos();
-    }
-
-    private void configurarEventos() {
-        malhaView.iniciarBotao.setOnAction(e -> iniciarSimulacao());
-        malhaView.encerrarInsercaoBotao.setOnAction(e -> pararInsercao());
-        malhaView.encerrarSimulacaoBotao.setOnAction(e -> encerrarSimulacao());
     }
 
-    private int getNumeroCarrosAtivos() throws InterruptedException {
-        semaforoListaCarros.acquire();
+    private int getNumeroCarrosAtivos() {
         try {
-            return carrosAtivos.size();
-        } finally {
-            semaforoListaCarros.release();
+            semaforoListaCarros.acquire();
+            try {
+                return carrosAtivos.size();
+            } finally {
+                semaforoListaCarros.release();
+            }
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+            return 0;
         }
     }
 
-    private void adicionarCarro(CarroSemaforo carro) throws InterruptedException {
-        semaforoListaCarros.acquire();
+    private boolean adicionarCarro(CarroSemaforo carro) {
         try {
-            carrosAtivos.add(carro);
-            System.out.println("Carro adicionado: " + carro.getName() +
-                    ". Total ativo: " + carrosAtivos.size());
-        } finally {
-            semaforoListaCarros.release();
+            semaforoListaCarros.acquire();
+            try {
+                carrosAtivos.add(carro);
+                System.out.println("Carro adicionado: " + carro.getName() +
+                        ". Total ativo: " + carrosAtivos.size());
+                return true;
+            } finally {
+                semaforoListaCarros.release();
+            }
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+            return false;
         }
     }
 
-    private void removerCarro(CarroSemaforo carro) throws InterruptedException {
-        semaforoListaCarros.acquire();
+    private boolean removerCarro(CarroSemaforo carro) {
         try {
-            carrosAtivos.remove(carro);
-            System.out.println("Carro removido: " + carro.getName() +
-                    ". Total ativo: " + carrosAtivos.size());
-        } finally {
-            semaforoListaCarros.release();
+            semaforoListaCarros.acquire();
+            try {
+                carrosAtivos.remove(carro);
+                System.out.println("Carro removido: " + carro.getName() +
+                        ". Total ativo: " + carrosAtivos.size());
+                return true;
+            } finally {
+                semaforoListaCarros.release();
+            }
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+            return false;
         }
     }
 
-    private List<CarroSemaforo> getCarrosAtivos() throws InterruptedException {
-        semaforoListaCarros.acquire();
+    private List<CarroSemaforo> getCarrosAtivos() {
         try {
-            return new ArrayList<>(carrosAtivos);
-        } finally {
-            semaforoListaCarros.release();
+            semaforoListaCarros.acquire();
+            try {
+                return new ArrayList<>(carrosAtivos);
+            } finally {
+                semaforoListaCarros.release();
+            }
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+            return new ArrayList<>();
         }
     }
 
-    private boolean carrosAtivosVazio() throws InterruptedException {
-        semaforoListaCarros.acquire();
+    private boolean carrosAtivosVazio() {
         try {
-            return carrosAtivos.isEmpty();
-        } finally {
-            semaforoListaCarros.release();
+            semaforoListaCarros.acquire();
+            try {
+                return carrosAtivos.isEmpty();
+            } finally {
+                semaforoListaCarros.release();
+            }
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+            return true;
         }
     }
 
-    private void limparCarrosAtivos() throws InterruptedException {
-        semaforoListaCarros.acquire();
+    private void limparCarrosAtivos() {
         try {
-            carrosAtivos.clear();
-        } finally {
-            semaforoListaCarros.release();
+            semaforoListaCarros.acquire();
+            try {
+                carrosAtivos.clear();
+            } finally {
+                semaforoListaCarros.release();
+            }
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
         }
     }
 
@@ -96,50 +119,29 @@ public class SimulacaoController implements ISimulacaoController{
 
         int limite = malhaView.limiteVeiculosSpinner.getValue();
         int intervalo = malhaView.intervaloSpinner.getValue();
-        boolean usarMonitor = malhaView.monitorRadio.isSelected();
 
         insercaoAtiva = true;
 
         threadInsercao = new Thread(() -> {
-            try {
-                while (insercaoAtiva) {
-                    try {
-                        if (getNumeroCarrosAtivos() < limite) {
-                            Platform.runLater(() -> {
-                                try {
-
-                                    CarroSemaforo carro = criarNovoCarro();
-
-                                    if (carro != null) {
-                                        adicionarCarro(carro);
-
-                                        carro.setOnTermino(() -> {
-                                            try {
-                                                removerCarro(carro);
-                                            } catch (InterruptedException e) {
-                                                Thread.currentThread().interrupt();
-                                                System.err.println("Erro ao remover carro: " + e.getMessage());
-                                            }
-                                        });
-
-                                        carro.start();
-                                    }
-                                } catch (InterruptedException e) {
-                                    Thread.currentThread().interrupt();
-                                    System.err.println("Erro ao criar carro: " + e.getMessage());
+            while (insercaoAtiva) {
+                try {
+                    if (getNumeroCarrosAtivos() < limite) {
+                        Platform.runLater(() -> {
+                            CarroSemaforo carro = criarNovoCarro();
+                            if (carro != null) {
+                                if (adicionarCarro(carro)) {
+                                    carro.setOnTermino(() -> removerCarro(carro));
+                                    carro.start();
                                 }
-                            });
-                        }
-                    } catch (InterruptedException e) {
-                        Thread.currentThread().interrupt();
-                        break;
+                            }
+                        });
                     }
-
                     Thread.sleep(intervalo);
+                } catch (InterruptedException ex) {
+                    break;
                 }
-            } catch (InterruptedException ex) {
-                System.out.println("Thread de inserção interrompida.");
             }
+            System.out.println("Thread de inserção encerrada.");
         });
 
         threadInsercao.setName("Thread-Insercao");
@@ -154,64 +156,54 @@ public class SimulacaoController implements ISimulacaoController{
     public void encerrarSimulacao() {
         insercaoAtiva = false;
 
-        try {
-            if (threadInsercao != null && threadInsercao.isAlive()) {
-                threadInsercao.interrupt();
-                try {
-                    threadInsercao.join(1000);
-                } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt();
-                }
+        if (threadInsercao != null && threadInsercao.isAlive()) {
+            threadInsercao.interrupt();
+            try {
+                threadInsercao.join(1000);
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
             }
+        }
 
-            List<CarroSemaforo> carrosParaFinalizar = getCarrosAtivos();
-            System.out.println("Solicitando parada de " + carrosParaFinalizar.size() + " carros...");
-
-            for (CarroSemaforo carro : carrosParaFinalizar) {
-                carro.requestShutdown();
-            }
+        List<CarroSemaforo> carrosParaFinalizar = getCarrosAtivos();
+        System.out.println("Solicitando parada de " + carrosParaFinalizar.size() + " carros...");
 
-            long shutdownStart = System.currentTimeMillis();
-            long timeout = 5000;
+        for (CarroSemaforo carro : carrosParaFinalizar) {
+            carro.requestShutdown();
+        }
 
-            while (!carrosAtivosVazio() &&
-                    (System.currentTimeMillis() - shutdownStart) < timeout) {
-                try {
-                    int remaining = getNumeroCarrosAtivos();
-                    System.out.println("Aguardando " + remaining + " carros finalizarem...");
+        long shutdownStart = System.currentTimeMillis();
+        long timeout = 5000;
 
-                    Thread.sleep(100);
-                    Platform.runLater(malhaView::atualizarCelulas);
-                } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt();
-                    break;
-                }
+        while (!carrosAtivosVazio() && (System.currentTimeMillis() - shutdownStart) < timeout) {
+            try {
+                int remaining = getNumeroCarrosAtivos();
+                System.out.println("Aguardando " + remaining + " carros finalizarem...");
+                Thread.sleep(100);
+                Platform.runLater(malhaView::atualizarCelulas);
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
+                break;
             }
+        }
 
-            if (!carrosAtivosVazio()) {
-                System.out.println("Aguardando threads restantes com join...");
-                List<CarroSemaforo> carrosRestantes = getCarrosAtivos();
-
-                for (CarroSemaforo carro : carrosRestantes) {
-                    try {
-                        carro.join(500);
-                        if (carro.isAlive()) {
-                            System.out.println(carro.getName() + " não finalizou no tempo esperado.");
-                            carro.interrupt();
-                        }
-                    } catch (InterruptedException e) {
-                        Thread.currentThread().interrupt();
+        if (!carrosAtivosVazio()) {
+            System.out.println("Forçando parada dos carros restantes...");
+            for (CarroSemaforo carro : getCarrosAtivos()) {
+                try {
+                    carro.join(500);
+                    if (carro.isAlive()) {
+                        System.out.println(carro.getName() + " não finalizou no tempo esperado.");
+                        carro.interrupt();
                     }
+                } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt();
                 }
             }
-
-            limparCarrosAtivos();
-
-        } catch (InterruptedException e) {
-            Thread.currentThread().interrupt();
-            System.err.println("Erro durante encerramento da simulação: " + e.getMessage());
         }
 
+        limparCarrosAtivos();
+
         for (Quadrante q : malhaController.getMalha().getQuadrantes().values()) {
             q.setCarro(null);
         }
@@ -236,27 +228,24 @@ public class SimulacaoController implements ISimulacaoController{
                 continue;
             }
 
-            long velocidadeAleatoria = 400 + rand.nextInt(801);
-            String nomeUnico = String.format("Carro-%d-%d",
-                    System.currentTimeMillis(),
-                    rand.nextInt(1000));
-
-            CarroSemaforo carro = new CarroSemaforo(entrada, velocidadeAleatoria, malhaView);
-            carro.setName(nomeUnico);
-
             try {
                 if (entrada.getSemaforo().tryAcquire(100, TimeUnit.MILLISECONDS)) {
+                    long velocidadeAleatoria = 400 + rand.nextInt(801);
+                    String nomeUnico = String.format("Carro-%d-%d",
+                            System.currentTimeMillis(),
+                            rand.nextInt(1000));
+
+                    CarroSemaforo carro = new CarroSemaforo(entrada, velocidadeAleatoria, malhaView);
+                    carro.setName(nomeUnico);
+
                     entrada.setCarro(carro);
                     entrada.setQuadranteDoCarro();
 
                     Platform.runLater(() -> malhaView.atualizarQuadrante(entrada));
                     return carro;
-                } else {
-                    System.out.println("Semáforo ocupado em " + entrada + ", tentando nova entrada...");
                 }
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt();
-                System.out.println("Criação de carro interrompida: " + e.getMessage());
                 return null;
             }
         }
@@ -264,5 +253,4 @@ public class SimulacaoController implements ISimulacaoController{
         System.out.println("Não foi possível criar novo carro após várias tentativas.");
         return null;
     }
-
 }
\ No newline at end of file
diff --git a/server/src/main/java/br/udesc/dsd/factory/ControllerFactory.java b/server/src/main/java/br/udesc/dsd/factory/ControllerFactory.java
index 6aca012..72a7342 100644
--- a/server/src/main/java/br/udesc/dsd/factory/ControllerFactory.java
+++ b/server/src/main/java/br/udesc/dsd/factory/ControllerFactory.java
@@ -1,4 +1,18 @@
 package br.udesc.dsd.factory;
 
+import br.udesc.dsd.controller.*;
+import br.udesc.dsd.view.MalhaView;
+
 public class ControllerFactory {
-}
+    public static ISimulacaoController criarSimulacaoController(
+            MalhaController malhaController,
+            MalhaView malhaView,
+            boolean usarMonitor) {
+
+        if (usarMonitor) {
+            throw new UnsupportedOperationException("Monitor ainda não implementado");
+        } else {
+            return new SimulacaoControllerSemaforo(malhaController, malhaView);
+        }
+    }
+}
\ No newline at end of file
diff --git a/server/src/main/java/br/udesc/dsd/model/CarroSemaforo.java b/server/src/main/java/br/udesc/dsd/model/CarroSemaforo.java
index 83c7696..f77c33c 100644
--- a/server/src/main/java/br/udesc/dsd/model/CarroSemaforo.java
+++ b/server/src/main/java/br/udesc/dsd/model/CarroSemaforo.java
@@ -7,7 +7,7 @@ import java.util.*;
 import java.util.concurrent.TimeUnit;
 import javafx.scene.paint.Color;
 
-public class Carro extends Thread {
+public class CarroSemaforo extends Thread implements ICarro {
     private Quadrante quadranteAtual;
     private long velocidade; // thread sleep para movimentação entre quadrantes
     private final MalhaView malhaView;
@@ -23,7 +23,7 @@ public class Carro extends Thread {
     private Runnable onTermino;
     private final Random rand = new Random();
 
-    public Carro(Quadrante quadranteInicial, long velocidade, MalhaView malhaView) {
+    public CarroSemaforo(Quadrante quadranteInicial, long velocidade, MalhaView malhaView) {
         this.quadranteAtual = quadranteInicial;
         this.velocidade = velocidade;
         this.malhaView = malhaView;
diff --git a/server/src/main/java/br/udesc/dsd/model/ICarro.java b/server/src/main/java/br/udesc/dsd/model/ICarro.java
index 1220b19..fc4b2f2 100644
--- a/server/src/main/java/br/udesc/dsd/model/ICarro.java
+++ b/server/src/main/java/br/udesc/dsd/model/ICarro.java
@@ -1,4 +1,16 @@
 package br.udesc.dsd.model;
 
-public interface ICarro {
-}
+import javafx.scene.paint.Color;
+
+public interface ICarro extends Runnable {
+    void start();
+    void requestShutdown();
+    void setOnTermino(Runnable onTermino);
+
+    void setQuadranteAtual(Quadrante quadrante);
+    Color getCor();
+    String getName();
+    boolean isAlive();
+    void join(long millis) throws InterruptedException;
+    void interrupt();
+}
\ No newline at end of file
diff --git a/server/src/main/java/br/udesc/dsd/model/Quadrante.java b/server/src/main/java/br/udesc/dsd/model/Quadrante.java
index 5a69760..bf00e44 100644
--- a/server/src/main/java/br/udesc/dsd/model/Quadrante.java
+++ b/server/src/main/java/br/udesc/dsd/model/Quadrante.java
@@ -7,7 +7,7 @@ public class Quadrante {
     private final int linha;
     private final int coluna;
     private Direcao direcao;
-    private volatile Carro carro;  // Volátil para visibilidade de thread
+    private volatile ICarro carro;  // Volátil para visibilidade de thread
     private final Map<Direcao, Quadrante> vizinhosDaFrente;
     private final Semaphore semaforo;
 
@@ -41,11 +41,11 @@ public class Quadrante {
         return carro != null;
     }
 
-    public Carro getCarro() {
+    public ICarro getCarro() {
         return carro;
     }
 
-    public void setCarro(Carro carro) {
+    public void setCarro(ICarro carro) {
         this.carro = carro;
     }
 
diff --git a/server/src/main/java/br/udesc/dsd/view/MainFX.java b/server/src/main/java/br/udesc/dsd/view/MainFX.java
index b439a79..6908f1e 100644
--- a/server/src/main/java/br/udesc/dsd/view/MainFX.java
+++ b/server/src/main/java/br/udesc/dsd/view/MainFX.java
@@ -1,20 +1,29 @@
 package br.udesc.dsd.view;
 
+import br.udesc.dsd.controller.ISimulacaoController;
 import br.udesc.dsd.controller.MalhaController;
-import br.udesc.dsd.controller.SimulacaoController;
+import br.udesc.dsd.factory.ControllerFactory;
 import javafx.application.Application;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 
 public class MainFX extends Application {
+    private ISimulacaoController controllerAtual;
+    private MalhaController malhaController;
+    private String caminhoArquivo;
+    private boolean usarMonitor = false;
+    private MalhaView malhaView;
 
     @Override
     public void start(Stage primaryStage) {
-        String caminhoArquivo = getClass().getClassLoader().getResource("malha-exemplo-3.txt").getPath();
-        MalhaController malhaController = new MalhaController(caminhoArquivo);
+        caminhoArquivo = getClass().getClassLoader().getResource("malha-exemplo-3.txt").getPath();
+        malhaController = new MalhaController(caminhoArquivo);
 
-        MalhaView malhaView = new MalhaView(malhaController.getMalha());
-        SimulacaoController simulacaoController = new SimulacaoController(malhaController, malhaView);
+        malhaView = new MalhaView(malhaController.getMalha());
+
+        usarMonitor = malhaView.monitorRadio.isSelected();
+
+        configurarBotoes();
 
         Scene scene = new Scene(malhaView.getRoot());
         primaryStage.setScene(scene);
@@ -22,7 +31,46 @@ public class MainFX extends Application {
         primaryStage.show();
     }
 
+    private void configurarBotoes() {
+
+        malhaView.iniciarBotao.setOnAction(e -> {
+            malhaController = new MalhaController(caminhoArquivo);
+            malhaView.setMalha(malhaController.getMalha());
+
+            try {
+                ISimulacaoController novoController = ControllerFactory
+                        .criarSimulacaoController(malhaController, malhaView, usarMonitor);
+                controllerAtual = novoController;
+                controllerAtual.iniciarSimulacao();
+            } catch (UnsupportedOperationException ex) {
+                System.err.println("Erro ao criar controller: " + ex.getMessage());
+                controllerAtual = null;
+            }
+        });
+
+        malhaView.encerrarInsercaoBotao.setOnAction(e -> {
+            if (controllerAtual != null) {
+                controllerAtual.pararInsercao();
+            }
+        });
+
+        malhaView.encerrarSimulacaoBotao.setOnAction(e -> {
+            if (controllerAtual != null) {
+                controllerAtual.encerrarSimulacao();
+                controllerAtual = null;
+            }
+        });
+
+        malhaView.monitorRadio.setOnAction(e -> {
+            usarMonitor = true;
+        });
+
+        malhaView.semaforoRadio.setOnAction(e -> {
+            usarMonitor = false;
+        });
+    }
+
     public static void main(String[] args) {
         launch(args);
     }
-}
+}
\ No newline at end of file
diff --git a/server/src/main/java/br/udesc/dsd/view/MalhaView.java b/server/src/main/java/br/udesc/dsd/view/MalhaView.java
index e011069..a2d23f9 100644
--- a/server/src/main/java/br/udesc/dsd/view/MalhaView.java
+++ b/server/src/main/java/br/udesc/dsd/view/MalhaView.java
@@ -16,7 +16,7 @@ public class MalhaView {
     private final Map<String, Rectangle> celulas = new HashMap<>();
     private final VBox painelControles;
     private final HBox layoutPrincipal;
-    private final MalhaViaria malha;
+    private MalhaViaria malha;
 
     public Spinner<Integer> limiteVeiculosSpinner;
     public Spinner<Integer> intervaloSpinner;
@@ -123,4 +123,8 @@ public class MalhaView {
     public void exibirMensagemFinal(boolean exibir) {
         mensagemFinal.setVisible(exibir);
     }
+
+    public void setMalha(MalhaViaria malha) {
+        this.malha = malha;
+    }
 }
\ No newline at end of file
